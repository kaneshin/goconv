package mbconv

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestHiraganaToKatakana(t *testing.T) {
	candidates := []struct {
		src      string
		expected string
	}{
		{"ぁあぃいぅうぇえぉおかがきぎく",
			"ァアィイゥウェエォオカガキギク"},
		{"ァアィイゥウェエォオカガキギク",
			"ァアィイゥウェエォオカガキギク"},
		{"グケゲコゴサザシジスズセゼソゾタ",
			"グケゲコゴサザシジスズセゼソゾタ"},
		{"ダチヂッツヅテデトドナニヌネノハ",
			"ダチヂッツヅテデトドナニヌネノハ"},
		{"バパヒビピフブプヘベペホボポマミ",
			"バパヒビピフブプヘベペホボポマミ"},
		{"ムメモャヤュユョヨラリルレロヮワ",
			"ムメモャヤュユョヨラリルレロヮワ"},
		{"ヰヱヲンヴヵヶヷヸヹヺ・ーヽヾ",
			"ヰヱヲンヴヵヶヷヸヹヺ・ーヽヾ"},
		{"｠｡｢｣､･ｦｧｨｩｪｫｬｭｮｯ",
			"｠｡｢｣､･ｦｧｨｩｪｫｬｭｮｯ"},
		{"ｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿ",
			"ｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿ"},
		{"ﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏ",
			"ﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏ"},
		{"ﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ",
			"ﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ"},
		{"Ｈｅｌｌｏ　Ｗｏｒｌｄ",
			"Ｈｅｌｌｏ　Ｗｏｒｌｄ"},
		{"Hello world",
			"Hello world"},
	}

	for _, c := range candidates {
		c := c
		t.Run(c.src, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, c.expected, HiraganaToKatakana(c.src))
		})
	}
}

func TestKatakanaToHiragana(t *testing.T) {
	candidates := []struct {
		src      string
		expected string
	}{
		{"ぁあぃいぅうぇえぉおかがきぎく",
			"ぁあぃいぅうぇえぉおかがきぎく"},
		{"ァアィイゥウェエォオカガキギク",
			"ぁあぃいぅうぇえぉおかがきぎく"},
		{"グケゲコゴサザシジスズセゼソゾタ",
			"ぐけげこごさざしじすずせぜそぞた"},
		{"ダチヂッツヅテデトドナニヌネノハ",
			"だちぢっつづてでとどなにぬねのは"},
		{"バパヒビピフブプヘベペホボポマミ",
			"ばぱひびぴふぶぷへべぺほぼぽまみ"},
		{"ムメモャヤュユョヨラリルレロヮワ",
			"むめもゃやゅゆょよらりるれろゎわ"},
		{"ヰヱヲンヴヵヶヷヸヹヺ・ーヽヾ",
			"ゐゑをんゔゕゖヷヸヹヺ・ーヽヾ"},
		{"｠｡｢｣､･ｦｧｨｩｪｫｬｭｮｯ",
			"｠｡｢｣､･ｦｧｨｩｪｫｬｭｮｯ"},
		{"ｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿ",
			"ｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿ"},
		{"ﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏ",
			"ﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏ"},
		{"ﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ",
			"ﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ"},
		{"Ｈｅｌｌｏ　Ｗｏｒｌｄ",
			"Ｈｅｌｌｏ　Ｗｏｒｌｄ"},
		{"Hello world",
			"Hello world"},
	}

	for _, c := range candidates {
		c := c
		t.Run(c.src, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, c.expected, KatakanaToHiragana(c.src))
		})
	}
}

func TestHalfWidthToFullWidth(t *testing.T) {
	candidates := []struct {
		src      string
		expected string
	}{
		{"ァアィイゥウェエォオカガキギク",
			"ァアィイゥウェエォオカガキギク"},
		{"グケゲコゴサザシジスズセゼソゾタ",
			"グケゲコゴサザシジスズセゼソゾタ"},
		{"ダチヂッツヅテデトドナニヌネノハ",
			"ダチヂッツヅテデトドナニヌネノハ"},
		{"バパヒビピフブプヘベペホボポマミ",
			"バパヒビピフブプヘベペホボポマミ"},
		{"ムメモャヤュユョヨラリルレロヮワ",
			"ムメモャヤュユョヨラリルレロヮワ"},
		{"ヰヱヲンヴヵヶヷヸヹヺ・ーヽヾ",
			"ヰヱヲンヴヵヶヷヸヹヺ・ーヽヾ"},
		{"｠｡｢｣､･ｦｧｨｩｪｫｬｭｮｯ",
			"｠。「」、・ヲァィゥェォャュョッ"},
		{"ｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿ",
			"ーアイウエオカキクケコサシスセソ"},
		{"ﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏ",
			"タチツテトナニヌネノハヒフヘホマ"},
		{"ﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ",
			"ミムメモヤユヨラリルレロワン゛゜"},
		{"Ｈｅｌｌｏ　Ｗｏｒｌｄ",
			"Ｈｅｌｌｏ　Ｗｏｒｌｄ"},
		{"Hello World",
			"Ｈｅｌｌｏ　Ｗｏｒｌｄ"},
	}

	for _, c := range candidates {
		c := c
		t.Run(c.src, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, c.expected, HalfWidthToFullWidth(c.src))
		})
	}
}

func TestFullWidthToHalfWidth(t *testing.T) {
	candidates := []struct {
		src      string
		expected string
	}{
		{"ァアィイゥウェエォオカガキギク",
			"ｧｱｨｲｩｳｪｴｫｵｶｶﾞｷｷﾞｸ"},
		{"グケゲコゴサザシジスズセゼソゾタ",
			"ｸﾞｹｹﾞｺｺﾞｻｻﾞｼｼﾞｽｽﾞｾｾﾞｿｿﾞﾀ"},
		{"ダチヂッツヅテデトドナニヌネノハ",
			"ﾀﾞﾁﾁﾞｯﾂﾂﾞﾃﾃﾞﾄﾄﾞﾅﾆﾇﾈﾉﾊ"},
		{"バパヒビピフブプヘベペホボポマミ",
			"ﾊﾞﾊﾟﾋﾋﾞﾋﾟﾌﾌﾞﾌﾟﾍﾍﾞﾍﾟﾎﾎﾞﾎﾟﾏﾐ"},
		{"ムメモャヤュユョヨラリルレロヮワ",
			"ﾑﾒﾓｬﾔｭﾕｮﾖﾗﾘﾙﾚﾛﾜﾜ"},
		{"ヰヱヲンヴヵヶヷヸヹヺ・ーヽヾ",
			"ｲｴｦﾝｳﾞヵヶヷヸヹヺ･ｰヽヾ"},
		{"｠｡｢｣､･ｦｧｨｩｪｫｬｭｮｯ",
			"⦆｡｢｣､･ｦｧｨｩｪｫｬｭｮｯ"},
		{"ｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿ",
			"ｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿ"},
		{"ﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏ",
			"ﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏ"},
		{"ﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ",
			"ﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ"},
		{"Ｈｅｌｌｏ　Ｗｏｒｌｄ",
			"Hello World"},
		{"Hello World",
			"Hello World"},
	}

	for _, c := range candidates {
		c := c
		t.Run(c.src, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, c.expected, FullWidthToHalfWidth(c.src))
		})
	}
}
